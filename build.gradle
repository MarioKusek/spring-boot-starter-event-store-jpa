plugins {
	id 'java-library'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'maven-publish'
	id "com.github.ben-manes.versions" version '0.51.0'
  	id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'hr.fer.tel.eventstore'
version = '0.1.0'

ext {
    set('testcontainers.version', "1.19.8")
}

java {
	sourceCompatibility = '21'
    withJavadocJar()
    withSourcesJar()
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"
	
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.7.6'
	runtimeOnly 'org.postgresql:postgresql'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
    enabled = false
}

// tasks: publishToSonatype closeSonatypeStagingRepository
// tasks: publishToSonatype closeAndReleaseSonatypeStagingRepository

// if you have not set rights to publish then this is taking effect in order to build project without publishing
if (!hasProperty('sonatypeUsername')) {
  ext.sonatypeUsername = 'fakeUser'
  ext.sonatypePassword = 'fakePassword'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}"
            artifactId = "${project.name}"
            version = "${version}"
            from components.java
            
            pom {
                description = 'This is event store Spring Boot starter the is using JPA to store events.'
                name = 'Event store JPA Spring Boot starter'
                url = 'https://github.com/MarioKusek/spring-boot-starter-event-store-jpa'
			
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    url = 'https://github.com/MarioKusek/spring-boot-starter-event-store-jpa'
                    connection = 'scm:git:https://github.com/MarioKusek/spring-boot-starter-event-store-jpa.git'
                    developerConnection = 'scm:git:ssh://git@github.com:MarioKusek/spring-boot-starter-event-store-jpa.git'
                }

                developers {
                    developer {
                        name = 'Mario Ku≈°ek'
                        email = "mario.kusek@fer.hr"
                    }
                }
            }
        }
    }
}

signing {
  sign publishing.publications
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
  
  transitionCheckOptions {
    maxRetries.set(100)
    delayBetween.set(Duration.ofSeconds(5))
  }
}

project.plugins.findPlugin('io.github.gradle-nexus.publish-plugin').any {
  project.extensions.nexusPublishing.repositories.all {
    def name = it.name.capitalize()

    tasks.register('publishAndClose') {
      dependsOn tasks.named("publishTo${name}")
      dependsOn tasks.named("close${name}StagingRepository")
    }
  		
    tasks.register('publishAndRelease') {
      dependsOn tasks.named("publishTo${name}")
      dependsOn tasks.named("closeAndRelease${name}StagingRepository")
    }
  }
}

